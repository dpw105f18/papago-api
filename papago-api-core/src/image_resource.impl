#pragma once
//create
template<>
inline void ImageResource::transition<vk::ImageLayout::eUndefined, vk::ImageLayout::eGeneral>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemeoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eUndefined, //oldLayout
		vk::ImageLayout::eGeneral, //newLayout
		VK_QUEUE_FAMILY_IGNORED,	//srcQueueFamilyIndex
		VK_QUEUE_FAMILY_IGNORED,	//dstQueueFamliyIndex
		m_vkImage, //image
		{ m_vkAspectFlags, 0, 1, 0, 1 } //subresourceRange
	);

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eTopOfPipe, //srcStageMask
		vk::PipelineStageFlagBits::eBottomOfPipe, //dstStageMask
		vk::DependencyFlags(), //dependencyFlags
		{}, //memoryBarriers
		{}, //bufferMemoryBarriers
		{ imageMemeoryBarrier } //imageMemoryBarriers
	);
}

//pre-upload
template<>
inline void ImageResource::transition<vk::ImageLayout::eGeneral, vk::ImageLayout::eTransferDstOptimal>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eGeneral,
		vk::ImageLayout::eTransferDstOptimal,
		VK_QUEUE_FAMILY_IGNORED,
		VK_QUEUE_FAMILY_IGNORED,
		m_vkImage,
		{ m_vkAspectFlags, 0, 1, 0, 1 });

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eBottomOfPipe,
		vk::PipelineStageFlagBits::eTopOfPipe,
		vk::DependencyFlags(),
		{},
		{},
		{ imageMemoryBarrier });
}


//post-upload
template<>
inline void ImageResource::transition<vk::ImageLayout::eTransferDstOptimal, vk::ImageLayout::eGeneral>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eTransferDstOptimal,
		vk::ImageLayout::eGeneral,
		VK_QUEUE_FAMILY_IGNORED,
		VK_QUEUE_FAMILY_IGNORED,
		m_vkImage,
		{ m_vkAspectFlags, 0, 1, 0, 1 });

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eBottomOfPipe,
		vk::PipelineStageFlagBits::eTopOfPipe,
		vk::DependencyFlags(),
		{},
		{},
		{ imageMemoryBarrier }
	);
}

//pre-download
template<>
inline void ImageResource::transition<vk::ImageLayout::eGeneral, vk::ImageLayout::eTransferSrcOptimal>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemeoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eGeneral, //oldLayout
		vk::ImageLayout::eTransferSrcOptimal, //newLayout
		VK_QUEUE_FAMILY_IGNORED,	//srcQueueFamilyIndex
		VK_QUEUE_FAMILY_IGNORED,	//dstQueueFamliyIndex
		m_vkImage, //image
		{ m_vkAspectFlags, 0, 1, 0, 1 } //subresourceRange
	);

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eTopOfPipe, //srcStageMask
		vk::PipelineStageFlagBits::eBottomOfPipe, //dstStageMask
		vk::DependencyFlags(), //dependencyFlags
		{}, //memoryBarriers
		{}, //bufferMemoryBarriers
		{ imageMemeoryBarrier } //imageMemoryBarriers
	);
}

//post-download
template<>
inline void ImageResource::transition<vk::ImageLayout::eTransferSrcOptimal, vk::ImageLayout::eGeneral>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemeoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eTransferSrcOptimal, //oldLayout
		vk::ImageLayout::eGeneral, //newLayout
		VK_QUEUE_FAMILY_IGNORED,	//srcQueueFamilyIndex
		VK_QUEUE_FAMILY_IGNORED,	//dstQueueFamliyIndex
		m_vkImage, //image
		{ m_vkAspectFlags, 0, 1, 0, 1 } //subresourceRange
	);

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eTopOfPipe, //srcStageMask
		vk::PipelineStageFlagBits::eBottomOfPipe, //dstStageMask
		vk::DependencyFlags(), //dependencyFlags
		{}, //memoryBarriers
		{}, //bufferMemoryBarriers
		{ imageMemeoryBarrier } //imageMemoryBarriers
	);
}

//pre-setUniform
template<>
inline void ImageResource::transition<vk::ImageLayout::eGeneral, vk::ImageLayout::eShaderReadOnlyOptimal>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemeoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eGeneral, //oldLayout
		vk::ImageLayout::eShaderReadOnlyOptimal, //newLayout
		VK_QUEUE_FAMILY_IGNORED,	//srcQueueFamilyIndex
		VK_QUEUE_FAMILY_IGNORED,	//dstQueueFamliyIndex
		m_vkImage, //image
		{ m_vkAspectFlags, 0, 1, 0, 1 } //subresourceRange
	);

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eTopOfPipe, //srcStageMask
		vk::PipelineStageFlagBits::eBottomOfPipe, //dstStageMask
		vk::DependencyFlags(), //dependencyFlags
		{}, //memoryBarriers
		{}, //bufferMemoryBarriers
		{ imageMemeoryBarrier } //imageMemoryBarriers
	);
}

//post-setUniform
template<>
inline void ImageResource::transition<vk::ImageLayout::eShaderReadOnlyOptimal, vk::ImageLayout::eGeneral>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemeoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eShaderReadOnlyOptimal, //oldLayout
		vk::ImageLayout::eGeneral, //newLayout
		VK_QUEUE_FAMILY_IGNORED,	//srcQueueFamilyIndex
		VK_QUEUE_FAMILY_IGNORED,	//dstQueueFamliyIndex
		m_vkImage, //image
		{ m_vkAspectFlags, 0, 1, 0, 1 } //subresourceRange
	);

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eTopOfPipe, //srcStageMask
		vk::PipelineStageFlagBits::eBottomOfPipe, //dstStageMask
		vk::DependencyFlags(), //dependencyFlags
		{}, //memoryBarriers
		{}, //bufferMemoryBarriers
		{ imageMemeoryBarrier } //imageMemoryBarriers
	);
}

//pre-present
template<>
inline void ImageResource::transition<vk::ImageLayout::eGeneral, vk::ImageLayout::ePresentSrcKHR>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemeoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::eGeneral, //oldLayout
		vk::ImageLayout::ePresentSrcKHR, //newLayout
		VK_QUEUE_FAMILY_IGNORED,	//srcQueueFamilyIndex
		VK_QUEUE_FAMILY_IGNORED,	//dstQueueFamliyIndex
		m_vkImage, //image
		{ m_vkAspectFlags, 0, 1, 0, 1 } //subresourceRange
	);

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eTopOfPipe, //srcStageMask
		vk::PipelineStageFlagBits::eBottomOfPipe, //dstStageMask
		vk::DependencyFlags(), //dependencyFlags
		{}, //memoryBarriers
		{}, //bufferMemoryBarriers
		{ imageMemeoryBarrier } //imageMemoryBarriers
	);
}

//post-present
template<>
inline void ImageResource::transition<vk::ImageLayout::ePresentSrcKHR, vk::ImageLayout::eGeneral>(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	auto imageMemeoryBarrier = vk::ImageMemoryBarrier(
		srcAccessFlags, //srcAccessMask
		dstAccessFlags, //dstAccessMask
		vk::ImageLayout::ePresentSrcKHR, //oldLayout
		vk::ImageLayout::eGeneral, //newLayout
		VK_QUEUE_FAMILY_IGNORED,	//srcQueueFamilyIndex
		VK_QUEUE_FAMILY_IGNORED,	//dstQueueFamliyIndex
		m_vkImage, //image
		{ m_vkAspectFlags, 0, 1, 0, 1 } //subresourceRange
	);

	commandBuffer->pipelineBarrier(
		vk::PipelineStageFlagBits::eTopOfPipe, //srcStageMask
		vk::PipelineStageFlagBits::eBottomOfPipe, //dstStageMask
		vk::DependencyFlags(), //dependencyFlags
		{}, //memoryBarriers
		{}, //bufferMemoryBarriers
		{ imageMemeoryBarrier } //imageMemoryBarriers
	);
}

//NOTE: this must always be after the other template definitions!
template<vk::ImageLayout source, vk::ImageLayout destination>
void ImageResource::transition(
	const CommandBuffer& commandBuffer
	, vk::AccessFlags srcAccessFlags
	, vk::AccessFlags dstAccessFlags)
{
	std::stringstream stream;

	stream << "Transition from " << to_string(source) << " to " << to_string(destination) << " not implemented.";
	PAPAGO_ERROR(stream.str());
}

// ********************* END TEMPLATE SPECIALIZATION! *************************************